#!/usr/bin/env bash

# MIT License — see LICENSE file


set -euo pipefail

# --- Colors ---
NC='\033[0m'        # No Color
RED='\033[0;31m'    # 🔴
GREEN='\033[0;32m'  # 🟢
YELLOW='\033[0;33m' # 🟡
BLUE='\033[0;34m'   # 🔵
CYAN='\033[0;36m'   # 🔵 light
MAGENTA='\033[0;35m' # 🟣

CONTAINER_NAME="${1:-}"
if [ -z "$CONTAINER_NAME" ]; then
    echo -e "${YELLOW}Usage: $0 <container-name>${NC}"
    exit 1
fi

declare -A FORWARDED_PORTS  # port => 1
declare -A SOCAT_PIDS       # port => pid

cleanup() {
    echo -e "${MAGENTA}🧹 Cleaning up...${NC}"
    for pid in "${SOCAT_PIDS[@]}"; do
        kill "$pid" 2>/dev/null || true
    done
    docker exec "$CONTAINER_NAME" pkill -f 'socat.*127.0.0.1' || true
    FORWARDED_PORTS=()
    SOCAT_PIDS=()
    exit 0
}

trap cleanup SIGINT SIGTERM EXIT

get_container_ip() {
    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$CONTAINER_NAME"
}

get_listening_ports() {
    docker exec "$CONTAINER_NAME" ss -tnlpH 2>/dev/null | awk '{print $4}' | sed -E 's/.*:([0-9]+)/\1/' | sort -n | uniq
}

port_is_localhost_only() {
    local port="$1"
    docker exec "$CONTAINER_NAME" ss -tnlpH | grep -E "127\.0\.0\.1:$port" &>/dev/null
}

create_socat_in_container() {
    local port="$1"
    docker exec -d "$CONTAINER_NAME" socat TCP-LISTEN:$port,fork TCP:127.0.0.1:$port
    echo -e "${CYAN}🔁 Started socat in container for port $port${NC}"
}

start_socat_on_host() {
    local port="$1"
    local container_ip="$2"
    socat TCP-LISTEN:$port,fork TCP:$container_ip:$port &
    local pid=$!
    SOCAT_PIDS["$port"]=$pid
    echo -e "${GREEN}➡️  Forwarding host:$port -> $container_ip:$port (PID $pid)${NC}"
}

stop_socat_on_host() {
    local port="$1"
    local pid="${SOCAT_PIDS[$port]:-}"
    if [ -n "$pid" ]; then
        kill "$pid" 2>/dev/null || true
        unset SOCAT_PIDS["$port"]
        echo -e "${RED}⛔ Stopped socat for port $port (PID $pid)${NC}"
    fi
}

monitor_and_forward_ports() {
    local container_ip
    container_ip=$(get_container_ip)

    echo -e "${BLUE}📡 Container started at $container_ip. Monitoring ports...${NC}"

    while docker inspect -f '{{.State.Running}}' "$CONTAINER_NAME" 2>/dev/null | grep -q true; do
        mapfile -t current_ports < <(get_listening_ports)

        declare -A CURRENT_SET=()
        for port in "${current_ports[@]}"; do
            CURRENT_SET["$port"]=1
        done

        # Stop stale forwards
        for port in "${!FORWARDED_PORTS[@]}"; do
            if [[ -z "${CURRENT_SET[$port]:-}" ]]; then
                stop_socat_on_host "$port"
                unset FORWARDED_PORTS["$port"]
            fi
        done

        # Start new forwards
        for port in "${current_ports[@]}"; do
            if [[ -n "${FORWARDED_PORTS["$port"]:-}" ]]; then
                continue
            fi

            if port_is_localhost_only "$port"; then
                create_socat_in_container "$port"
                sleep 0.5
            fi

            start_socat_on_host "$port" "$container_ip"
            FORWARDED_PORTS["$port"]=1
        done

        sleep 2
    done
}

listen_for_events() {
    echo -e "${BLUE}📥 Waiting for container '$CONTAINER_NAME' to start...${NC}"
    docker events --filter "container=$CONTAINER_NAME" --format '{{.Status}}' | while read -r event; do
        case "$event" in
            start)
                echo -e "${BLUE}▶️  Container started${NC}"
                monitor_and_forward_ports
                echo -e "${MAGENTA}⛔ Container stopped. Cleaning up...${NC}"
                cleanup
                ;;
        esac
    done
}

listen_for_events
